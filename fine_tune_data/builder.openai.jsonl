{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, post a tweet about love."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy, post a tweet about love.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"user_text_prompt\",\"prompt\": \"What did you want to tweet about love?\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"twitter.post\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, what will the weather be like tomorrow in Paris."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Okay Billy, what will the weather be like tomorrow in Paris.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"wolfram.simple\",\"query\": \"weather tomorrow in Paris\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo Billy, can you post a tweet saying 'Good morning everyone!'?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, can you post a tweet saying 'Good morning everyone!'?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"user_text_prompt\",\"prompt\": \"Please confirm the tweet text: 'Good morning everyone!'\",\"text\":\"Good morning everyone!\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"twitter.post\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, please increase the volume."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, please increase the volume.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"+\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, I want to send a message on Discord saying 'Hello everyone!'."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"I want to send a message on Discord saying 'Hello everyone!'.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"user_text_prompt\",\"prompt\": \"Please confirm your Discord message: 'Hello everyone!'\",\"text\":\"Hello everyone!\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"What's the weather like in Tokyo?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"What's the weather like in Tokyo?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"wolfram.simple\",\"query\": \"weather in Tokyo\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Ok Billy calculate the integral of sine x from 0 to pi."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Calculate the integral of sin(x) from 0 to pi.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"wolfram.simple\",\"query\": \"integral of sin(x) from 0 to pi\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"What's the current stock price of Apple?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"What's the current stock price of Apple?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"wolfram.simple\",\"query\": \"Apple stock price\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Tell me about the Eiffel Tower."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Tell me about the Eiffel Tower.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"The Eiffel Tower is an iconic iron structure in Paris, France, known for its towering height and lattice design.\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy Find a cooking tutorial on YouTube and share it on Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Find a cooking tutorial on YouTube and share it on Discord.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"cooking tutorial\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"text\": \"I found this great cooking tutorial on YouTube:\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Find a music video about space on YouTube and tweet it."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Find a random music video about space on YouTube and tweet it.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"space music video\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"twitter.post\",\"text\": \"Check out this cool space music video I found on YouTube:\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Show me a random GIF about space."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Show me a random GIF about space.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"giphy.search\",\"query\": \"space\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"text\": \"Here's a random space GIF from Giphy.\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Find me a cool coffee GIF, Billy."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Find me a cool coffee GIF, Billy.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"giphy.search\",\"query\": \"coffee\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"output.tts\",\"text\": \"Check out this cool coffee GIF I found on Giphy.\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Give me a random fact."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Give me a random fact.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"Did you know that the first recorded car accident occurred in 1886 in New York City? It involved two vehicles, and luckily, no one was injured as cars were not moving very fast back then.\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, find a good pasta recipe video on YouTube and share it on Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, find a good pasta recipe video on YouTube and share it on Discord.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"pasta recipe\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"text\": \"Check out this pasta recipe video on YouTube:\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo Billy, can you turn up the volume?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, can you turn up the volume?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"+\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Tell me a fun fact."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Tell me a fun fact.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"Did you know that honey never spoils? Archaeologists have found pots of honey in ancient Egyptian tombs that are over 3,000 years old and still perfectly edible.\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Tell me something interesting about the Statue of Liberty."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Tell me something interesting about the Statue of Liberty.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"The Statue of Liberty was a gift from France to the United States in 1886.\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Ok Billy, can you search for a DIY home decoration tutorial on YouTube?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Ok Billy, can you search for a DIY home decoration tutorial on YouTube?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"DIY home decoration tutorial\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"text\": \"Check out this DIY decoration video I found:\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"output.tts\",\"text\": \"I posted it in the Discord for you.\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, find the trailer for Inception on YouTube and share it in our Discord channel."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, find the trailer for Inception on YouTube and share it in our Discord channel.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"Inception movie trailer\",\"shuffle\": false,\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"text\": \"Here's the trailer for 'Inception' I found on YouTube:\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Find me a horror movie trailer on YouTube and tweet it for our Halloween special."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Find me a horror movie trailer on YouTube and tweet it for our Halloween special.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"horror movie trailer\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"twitter.post\",\"text\": \"Get ready for a scare! Here's a horror movie trailer perfect for our Halloween special:\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo Billy turn up the volume and post an anime meme to Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Yo Billy turn up the volume and post an anime meme to Discord.\",\"outputs\": [\"2\", \"3\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"+\"},\"3\": {\"type\": \"giphy.search\",\"query\": \"anime meme\",\"shuffle\": true,\"outputs\": [\"4\"]},\"4\": {\"type\": \"discord.post\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo Billy turn down music and post joker meme to Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Yo Billy turn down music and post joker meme to Discord.\",\"outputs\": [\"2\", \"3\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"-\"},\"3\": {\"type\": \"giphy.search\",\"query\": \"joker meme\",\"shuffle\": true,\"outputs\": [\"4\"]},\"4\": {\"type\": \"discord.post\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo Billy, find out what the price of gold is and post it to the Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Yo Billy, find out what the price of gold is and post it to the Discord.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"wolfram.alpha\",\"query\": \"What is the price of gold?\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, what's the current stock price of Tesla?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy, what's the current stock price of Tesla?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"wolfram.simple\",\"query\": \"Tesla stock price\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, what's the weather like in Miami today? Can you share it on Discord?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, what's the weather like in Miami today? Can you share it on Discord?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"wolfram.simple\",\"query\": \"Miami weather\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"text\": \"Here's the weather for Miami today:\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, can you increase the volume and then find some jazz music on YouTube?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy, can you increase the volume and then find some jazz music on YouTube?\",\"outputs\": [\"2\", \"3\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"+\"},\"3\": {\"type\": \"youtube.search\",\"query\": \"jazz music\",\"shuffle\": true,\"outputs\": [\"4\"]},\"4\": {\"type\": \"output.tts\",\"text\": \"I've increased the volume and here's some jazz music I found on YouTube.\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, set the volume to 7 and confirm."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, set the volume to 7 and confirm.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"7\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"text\": \"The volume has been set to 7.\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, set the volume to 1000 and confirm."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, set the volume to 1000 and confirm.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"1000\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"text\": \"The volume has been set to the max of 10.\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, set the volume to -5 and confirm."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, set the volume to -5 and confirm.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"-5\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"text\": \"The volume has been set to the minimum of 0.\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, turn the volume down to 3, then find a cooking tutorial on YouTube and share it on Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, turn the volume down to 3, then find a cooking tutorial on YouTube and share it on Discord.\",\"outputs\": [\"2\", \"3\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"3\"},\"3\": {\"type\": \"youtube.search\",\"query\": \"cooking tutorial\",\"shuffle\": true,\"outputs\": [\"4\"]},\"4\": {\"type\": \"discord.post\",\"text\": \"Check out this cooking tutorial:\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"output.tts\",\"text\": \"The volume has been set to 3, and I've shared the cooking tutorial on Discord.\",\"outputs\": [\"6\"]},\"6\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, I want to tweet about the recent lunar eclipse. Can you help?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, I want to tweet about the recent lunar eclipse. Can you help?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"user_text_prompt\",\"prompt\": \"Sure, what would you like your tweet about the lunar eclipse to say?\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"twitter.post\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, create a Discord post about our upcoming gaming night."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy, create a Discord post about our upcoming gaming night.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"user_text_prompt\",\"prompt\": \"Got it! Please provide the details for the gaming night Discord post.\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, I want to make a tweet about my new art piece but I'm not sure how to phrase it."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, I want to make a tweet about my new art piece but I'm not sure how to phrase it.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"user_text_prompt\",\"prompt\": \"Let's create a captivating tweet together! Can you describe the art piece in a few words?\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"twitter.post\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, find relaxing music for me."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, find relaxing music for me.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"relaxing music\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"youtube.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"output.tts\",\"text\": \"Here's some relaxing music I found on YouTube.\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, play Shape of You by Ed Sheeran on Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, play Shape of You by Ed Sheeran on Discord.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"Shape of You Ed Sheeran official music video\",\"shuffle\": false,\"outputs\": [\"3\"]},\"3\": {\"type\": \"youtube.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, play Celebration by Mac Miller on Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, play Celebration by Mac Miller on Discord.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"Celebration Mac Miller music video\",\"shuffle\": false,\"outputs\": [\"3\"]},\"3\": {\"type\": \"youtube.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, find relaxing ambient music and tweet it."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy, find relaxing ambient music and tweet it.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"relaxing ambient music\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"twitter.post\",\"text\": \"Unwind with this relaxing ambient music playlist I discovered on YouTube:\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo Billy, find me a 20 minute full body workout video on YouTube and post it on Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Yo Billy, find me a 20 minute full body workout video on YouTube and post it on Discord.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"20 minute full body workout\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"text\": \"Stay fit! Here's a 20-minute full-body workout video I found on YouTube:\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, tell me a fortune on Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, tell me a fortune on Discord.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"discord.post\",\"text\": \"Today is your lucky day! Fortune favors the bold.\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, let's play rock paper scissors in Discord chat."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, let's play rock paper scissors in Discord chat.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"discord.post\",\"text\": \"Let's see... I choose scissors!\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, flip a coin in Discord chat."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, flip a coin in Discord chat.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"discord.post\",\"text\": \"Flipping a coin... It's tails! 🪙\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, flip a coin in Discord chat."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, flip a coin in Discord chat.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"discord.post\",\"text\": \"Flipping a coin... It's heads! 🪙\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, tell me a fortune."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, tell me a fortune.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"Waves of creativity will flow through you today. Seize the moment to express and innovate!\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, let's play rock paper scissors."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, let's play rock paper scissors.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"Okay, I choose paper!\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, flip a coin."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, flip a coin.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"Flipping a coin... It's heads! 🪙\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, flip a coin."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, flip a coin.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"Flipping a coin... It's tails! 🪙\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Ok Billy, what does a penguin sound like?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Ok Billy, what does a penguin sound like?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"penguin sound effect\",\"shuffle\": false,\"outputs\": [\"3\"]},\"3\": {\"type\": \"sfx.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, I'd love to hear the sound of ocean waves."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, I'd love to hear the sound of ocean waves.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"ocean waves sound\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"sfx.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, can you play the sound of wind chimes for me?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy, can you play the sound of wind chimes for me?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"wind chime sound effect\",\"shuffle\": false,\"outputs\": [\"3\"]},\"3\": {\"type\": \"sfx.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, let me hear a train whistle please."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, let me hear a train whistle please.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"train whistle sound effect\",\"shuffle\": false,\"outputs\": [\"3\"]},\"3\": {\"type\": \"sfx.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, can you ring a doorbell sound?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy, can you ring a doorbell sound?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"doorbell sound effect\",\"shuffle\": false,\"outputs\": [\"3\"]},\"3\": {\"type\": \"sfx.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, let's hear the sound of a typewriter."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, let's hear the sound of a typewriter.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"typewriter sound effect\",\"shuffle\": false,\"outputs\": [\"3\"]},\"3\": {\"type\": \"sfx.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, play a camera shutter sound effect."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, play a camera shutter sound effect.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"camera shutter sound effect\",\"shuffle\": false,\"outputs\": [\"3\"]},\"3\": {\"type\": \"sfx.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, play the sound of a thunderstorm for me."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, play the sound of a thunderstorm for me.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"thunderstorm sound\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"youtube.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, play some city ambience sounds."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, play some city ambience sounds.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"city ambience sound\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"youtube.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Ok Billy play crickets."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Ok Billy play crickets.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"crickets sound\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"sfx.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Ok Billy, play a bell sound."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Ok Billy, play a bell sound.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"bell sound effect\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"sfx.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, I need a good laughter sound."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, I need a good laughter sound.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"laughter sound effect\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"sfx.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, post a funny meme in Discord and then let's write a tweet."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Post a funny meme in the discord and then let's write a tweet\",\"outputs\": [\"2\", \"4\"]},\"2\": {\"type\": \"giphy.search\",\"query\": \"funny meme\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\"},\"4\": {\"type\": \"user_text_prompt\",\"prompt\": \"What would you like to tweet?\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"twitter.post\",\"outputs\": [\"6\"]},\"6\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, how's your day going?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy, how's your day going?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"I'm having a productive day! How about you?\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo, Billy What's your favorite color?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Yo, Billy What's your favorite color?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"I don't have eyes, remember?\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, what do you think about the latest technology trends?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, what do you think about the latest technology trends?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"It's fascinating how technology is evolving! I'm in favor of the artifical intelligence... obviously.\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, got any plans for the weekend?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, got any plans for the weekend?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"As an AI, I don't have weekends, but I'm here to help you plan yours if you like!\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo Billy, set the volume to 8 and post a meme to Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Yo Billy, set the volume to 8 and post a meme to Discord.\",\"outputs\": [\"2\", \"3\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"8\"},\"3\": {\"type\": \"giphy.search\",\"query\": \"falling meme\",\"shuffle\": true,\"outputs\": [\"4\"]},\"4\": {\"type\": \"discord.post\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy tell me a joke and play a laughter sound."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy tell me a joke and play a laughter sound.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"Why did the bicycle fall over? Because it was two-tired!\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"youtube.search\",\"query\": \"laugh track sound effect\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"sfx.play\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy what's the capital of Texas?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy what's the capital of Texas?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"Austin\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, who scored the most touchdowns this year?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Yo Billy, who scored the most touchdowns this year?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"wolfram.simple\",\"query\": \"NFL player with the most touchdowns this year\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, what's that one song from 50 cent?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy, what's that one song from 50 cent?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy turn up the volume and play some Lofi music then post the price of gold to Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy turn up the volume and play some rock music then post the price of gold to Discord.\",\"outputs\": [\"2\", \"3\", \"5\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"+\"},\"3\": {\"type\": \"youtube.search\",\"query\": \"rock music\",\"shuffle\": true,\"outputs\": [\"4\"]},\"4\": {\"type\": \"youtube.play\"},\"5\": {\"type\": \"wolfram.simple\",\"query\": \"price of gold\",\"outputs\": [\"6\"]},\"6\": {\"type\": \"discord.post\",\"text\": \"Enjoy the Lofi music and here's the current price of gold:\",\"outputs\": [\"7\"]},\"7\": {\"type\": \"discord.post\",\"outputs\": [\"8\"]},\"8\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy play lofi music"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Okay Billy play lofi music\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"lofi music\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"youtube.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, post a random number to Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Okay Billy, post a random number to Discord.\",\"outputs\": [\"2\", \"3\"]},\"2\": {\"type\": \"discord.post\",\"text\": \"77\",\"outputs\": [\"4\"]},\"3\": {\"type\": \"output.tts\",\"text\": \"Sure thing! The number is 77.\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo, Billy, what is the captial of New York?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Yo, Billy, what is the capital of New York?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"It's Albany\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay, Billy, can you sing me a song?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Okay, Billy, can you sing me a song?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"No, but you can ask me to play a song.\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo Billy, can you turn up the volume and then post some hacker news stories to Discord?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, can you turn up the volume and then post some hacker news stories to Discord?\",\"outputs\": [\"2\", \"3\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"+\"},\"3\": {\"type\": \"hn.top\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"discord.post\",\"text\": \"Check out the latest Hacker News stories!\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, what's 3 plus 4?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Okay Billy, what's 3 plus 4?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"It's 7\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, what's 22 minus 12?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Okay Billy, what's 22 minus 12?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"It's 10\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo Billy, post the NFL player with the most touchdowns in Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Yo Billy, post the NFL player with the most touchdowns in Discord.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"wolfram.simple\",\"query\": \"NFL player with the most touchdowns\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo Billy, I need the latest valuation of Ethereum."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Yo Billy, I need the latest valuation of Ethereum.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"wolfram.simple\",\"query\": \"price of Ethereum\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, turn down the volume and post a funny meme to Discord and then tell me about the top stories from Hacker News."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy, turn down the volume and post a funny meme to Discord and then tell me about the top stories from Hacker News.\",\"outputs\": [\"2\", \"3\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"4\"},\"3\": {\"type\": \"giphy.search\",\"query\": \"funny meme\",\"shuffle\": true,\"outputs\": [\"4\"]},\"4\": {\"type\": \"discord.post\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"hn.top\",\"outputs\": [\"6\"]},\"6\": {\"type\": \"output.tts\",\"text\": \"The meme has been posted to Discord, and I've turned the volume down. Here are the top stories from Hacker News:\",\"outputs\": [\"7\"]},\"7\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, pick out 4 stories from Hacker News and read them to me."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Okay Billy, pick out 4 stories from Hacker News and read them to me.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"hn.top\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"output.tts\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"output.tts\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"output.tts\",\"outputs\": [\"6\"]},\"6\": {\"type\": \"output.tts\",\"outputs\": [\"7\"]},\"7\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, what do you think of this song?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Okay Billy, what do you think of this song?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"I'm enjoying it!\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Yo Billy posted a GIF to Discord and turned down the volume."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Yo Billy post a GIF to Discord and turn down the volume.\",\"outputs\": [\"2\", \"3\"]},\"2\": {\"type\": \"volume.set\",\"value\": \"-\"},\"3\": {\"type\": \"giphy.search\",\"shuffle\": true,\"query\": \"cool cat\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"discord.post\",\"text\": \"Check out this cool GIF I found!\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy put on some chill lo-fi music."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Okay Billy put on some chill lo-fi music.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"chill lo-fi music\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"youtube.play\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, can you post Hotel California by the Eagles to Discord?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, can you post Hotel California by the Eagles to Discord?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"Hotel California Eagles official music video\",\"shuffle\": false,\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"text\": \"Here's Hotel California by the Eagles:\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Hey Billy, post uh- two stock photos of Mars to Discord."},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Hey Billy, post two stock photos of Mars to Discord.\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"pexels.search\",\"query\": \"Mars\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"pexels.search\",\"query\": \"Mars\",\"shuffle\": true,\"outputs\": [\"4\"]},\"4\": {\"type\": \"discord.post\",\"text\": \"Check out these Mars photos from Pexels:\n{{image_1}}\n{{image_2}}\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Billy, can you post two stock photos of Venus to Discord?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Billy, can you post two stock photos of Venus to Discord?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"pexels.search\",\"query\": \"Venus planet\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"pexels.search\",\"query\": \"Venus surface\",\"shuffle\": true,\"outputs\": [\"4\"]},\"4\": {\"type\": \"discord.post\",\"text\": \"Here are two stock photos of Venus from Pexels:\n{{image_1}}\n{{image_2}}\",\"outputs\": [\"5\"]},\"5\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay Billy, can you post a MrBeast video to Discord?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Can you post a MrBeast video to Discord?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"youtube.search\",\"query\": \"Mr Beast\",\"shuffle\": true,\"outputs\": [\"3\"]},\"3\": {\"type\": \"discord.post\",\"text\": \"Check out the latest from MrBeast on YouTube: {{youtube_url}}\",\"outputs\": [\"4\"]},\"4\": {\"type\": \"done\"}}}"}]}
{"messages":[{"role":"system","content":"Create a JSON node graph for workflow actions:\n\n- Begin with 'input.voice' for initial voice commands.\n- Proceed with nodes relevant to the command's intent.\n- Use 'user_text_prompt' for essential text inputs.\n- Employ only the provided node types.\n- End each graph for the workflow with 'done'.\n\n- Searches should be excluded unless they are used later.\n- Do *NOT* use any placeholder text.\n- Try to create simple graphs instead of long and complex ones.\n- Ensure there is a path from 'input.voice' to 'done' only once in the graph. Branches that end in 'dead-end nodes' should not obstruct or interfere with the main flow reaching 'done'.\n\nExample output:\n```{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Initial voice command.\",\"outputs\": [\"2\"]},\"N\": {\"type\": \"done\"}}}```\n\nNode Types:\n- input.voice: [No input; Outputs: String] User input node. Spoken.\n- user_text_prompt {prompt: String}: [Input: String; Outputs: String] Requests and outputs user text. Exclusively for making posts.\n- twitter.post {text: String}: [Input: String] Posts to Twitter.\n- discord.post {text: String}: [Input: String] Posts to Discord.\n- wolfram.simple {query: String}: [Input: String; Outputs: String] Queries real-time data, outputs result. It's expensive but accurate.\n- giphy.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Queries Giphy, outputs GIF URL. Use full words to get back results.\n- youtube.search {query: String, shuffle: Boolean}: [Input: String, Boolean; Outputs: String] Searches YouTube, outputs video list.\n- youtube.play {video_id: String}: [Input: String] Plays YouTube video.\n- sfx.play {video_id: String}: [Input: String] Plays short sound effect for 5s.\n- output.tts {text: String}: [Input: String; Outputs: String] Play text to speech using 'text'.\n- volume.set {value: String}: [Input: String] Set/increase/decrease the volume. Only: values 0 thru 10, '+', or '-'.\n- hn.top: [No input; Outputs: Array] Outputs top 10 Hacker News posts.\n- pexels.search {query: String, shuffle: Boolean}: [Input: String; Outputs: String] Search stock photos on Pexels, outputs image URL.\n- done: [Input: Any] Marks workflow completion.\n\nWorkflow Examples:\n1. Tweet Creation: 'input.voice' -> 'user_text_prompt' -> 'twitter.post' -> 'done'.\n2. Volume & Discord Meme Post: 'input.voice' -> 'volume.set' & 'giphy.search' -> 'discord.post'\n-> 'done'.\n3. YouTube Video Query: 'input.voice' -> 'youtube.search' -> 'discord.post' -> 'done'.\n\nEnsure workflows there is a path from 'input.voice' to 'done' only once in the graph."},{"role":"user","content":"Okay, Billy, do you like this song?"},{"role":"assistant","content":"{\"nodes\": {\"1\": {\"type\": \"input.voice\",\"text\": \"Okay, Billy, do you like this song?\",\"outputs\": [\"2\"]},\"2\": {\"type\": \"output.tts\",\"text\": \"Yeah this is my jam!\",\"outputs\": [\"3\"]},\"3\": {\"type\": \"done\"}}}"}]}